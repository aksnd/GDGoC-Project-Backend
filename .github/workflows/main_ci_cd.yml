name: FastAPI Docker CI/CD

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때 워크플로우 실행

# GitHub Secrets에서 설정한 변수들을 환경 변수로 사용
env:
  # ❗ GitHub Packages를 사용한다고 가정하고 경로 설정
  IMAGE_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/my-fastapi-app # 레지스트리 경로/이미지 이름
  IMAGE_TAG: latest # 항상 latest 태그를 사용 (최신 이미지를 나타냄)
  
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      # 1. 레지스트리 로그인 (GitHub Packages 사용)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }} # 현재 워크플로우 실행 사용자
          password: ${{ secrets.GITHUB_TOKEN }} # GitHub Actions에서 제공하는 기본 토큰 사용

      # 2. Docker 이미지 빌드 및 태그 지정
      - name: Build Docker image
        run: |
          # 이미지 경로를 IMAGE_REGISTRY/IMAGE_NAME:IMAGE_TAG 형태로 완성
          docker build -t ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
          
      # 3. 이미지 레지스트리에 푸시
      - name: Push Docker image
        run: docker push ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      # 4. SSH를 통해 GCP 서버에 접속하여 배포 명령 실행
      - name: Deploy to GCP Instance via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Starting deployment on GCP server..."
            
            # 프로젝트 디렉토리로 이동 (경로는 사용자님의 환경에 맞게 조정)
            cd ~/GDGoC-Project-Backend

            # 최신 이미지를 레지스트리에서 가져옴 (pull)
            # ❗ docker-compose.yml의 image 경로와 일치해야 합니다.
            docker compose pull web
            
            # 새 이미지로 컨테이너 교체 (다운타임 최소화)
            # --no-deps는 종속성이 없음을 명시
            docker compose up -d --no-deps web

            echo "Deployment successful. New container is running on port 8002."